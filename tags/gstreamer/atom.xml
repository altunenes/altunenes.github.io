<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>altunenes - Gstreamer</title>
    <subtitle>personal blog</subtitle>
    <link rel="self" type="application/atom+xml" href="https://altunenes.github.io/tags/gstreamer/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://altunenes.github.io/"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-06-30T00:00:00+00:00</updated>
    <id>https://altunenes.github.io/tags/gstreamer/atom.xml</id>
    <entry xml:lang="en">
        <title>GStreamer Parallel Video Processing Experiment: Testing Worker Count and Batch Size Trade-offs</title>
        <published>2025-06-30T00:00:00+00:00</published>
        <updated>2025-06-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://altunenes.github.io/posts/cpu/"/>
        <id>https://altunenes.github.io/posts/cpu/</id>
        
        <content type="html" xml:base="https://altunenes.github.io/posts/cpu/">&lt;h2 id=&quot;why-this-matters&quot;&gt;&lt;span style=&quot;color:orange;&quot;&gt;  Why This Matters &lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I previously researched parallel video processing, which led to a discussion on the &lt;a href=&quot;https:&#x2F;&#x2F;discourse.gstreamer.org&#x2F;t&#x2F;optimizing-video-frame-processing-with-gstreamer-gpu-acceleration-and-parallel-processing&#x2F;4190&quot;&gt;GStreamer Discourse forums&lt;&#x2F;a&gt;. That work inspired this separate, simplified experiment to isolate and measure CPU parallelism effects in context of video. Since public resources on this topic are limited, I hope these findings offer some insight. Video processing is complex and requires systematic testing to understand performance bottlenecks. This post documents my results from using a heavy, artificial workload to find the trade-offs of adding more worker threads. The full source code is available on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;altunenes&#x2F;gstreamer-parallelism-study&quot;&gt;GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implementation&quot;&gt;&lt;span style=&quot;color:orange;&quot;&gt;  Implementation &lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The implementation uses a two-phase approach to properly isolate parallel processing effects:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Phase 1 - Frame Extraction&lt;&#x2F;strong&gt;: GStreamer sequentially decodes all video frames into memory, eliminating I&#x2F;O bottlenecks from parallel processing measurement.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Phase 2 - Parallel Processing&lt;&#x2F;strong&gt;: All frames are distributed to worker threads through crossbeam channels. Each worker performs CPU-intensive operations including matrix multiplication and recursive fibonacci calculations.&lt;&#x2F;p&gt;
&lt;p&gt;Key components:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;GStreamer pipeline for video decoding&lt;&#x2F;li&gt;
&lt;li&gt;Worker pool with crossbeam channels&lt;&#x2F;li&gt;
&lt;li&gt;Artificial CPU load simulation (matrix operations + fibonacci)&lt;&#x2F;li&gt;
&lt;li&gt;Two-phase execution (decode then process)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;highlight&quot; style=&quot;background: #2b303b; padding: 1em; border-radius: 8px; font-family: &#x27;Fira Code&#x27;, &#x27;Source Code Pro&#x27;, monospace; font-size: 14px; line-height: 1.4;&quot;&gt;
&lt;pre style=&quot;margin: 0; white-space: pre;&quot;&gt;
                        &lt;span style=&quot;color: #ff9900;&quot;&gt;PHASE 1: Sequential Frame Extraction&lt;&#x2F;span&gt;
                        &lt;span style=&quot;color: #61afef;&quot;&gt;┌─────────────┐&lt;&#x2F;span&gt;      &lt;span style=&quot;color: #61afef;&quot;&gt;┌────────────────┐&lt;&#x2F;span&gt;      &lt;span style=&quot;color: #61afef;&quot;&gt;┌───────────────────┐&lt;&#x2F;span&gt;
                        &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt; Video File  &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color: #c3e88d;&quot;&gt;─────▶&lt;&#x2F;span&gt;&lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt; GStreamer      &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color: #c3e88d;&quot;&gt;─────▶&lt;&#x2F;span&gt;&lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt; All Frames in   &lt;span style=&quot;color: #61afef;&quot;&gt;  │&lt;&#x2F;span&gt;
                        &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt; (MP4)       &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt;      &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt; Pipeline       &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt;      &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt; Memory (1440)   &lt;span style=&quot;color: #61afef;&quot;&gt;  │&lt;&#x2F;span&gt;
                        &lt;span style=&quot;color: #61afef;&quot;&gt;└─────────────┘&lt;&#x2F;span&gt;      &lt;span style=&quot;color: #61afef;&quot;&gt;└────────────────┘&lt;&#x2F;span&gt;      &lt;span style=&quot;color: #61afef;&quot;&gt;└───────────────────┘&lt;&#x2F;span&gt;
                                                                      &lt;span style=&quot;color: #c3e88d;&quot;&gt;│&lt;&#x2F;span&gt;
                                                                      &lt;span style=&quot;color: #c3e88d;&quot;&gt;▼&lt;&#x2F;span&gt;
                   &lt;span style=&quot;color: #ff9900;&quot;&gt;PHASE 2: Parallel Processing&lt;&#x2F;span&gt;
                   &lt;span style=&quot;color: #61afef;&quot;&gt;┌───────────────────────────────────────────────────────────────────┐&lt;&#x2F;span&gt;
                   &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt;    &lt;span style=&quot;color: #abb2bf;&quot;&gt;Main Thread: Pre-batches all frames, then sends to channel&lt;&#x2F;span&gt;     &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt;
                   &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt;           &lt;span style=&quot;color: #c3e88d;&quot;&gt;[Batch 1]&lt;&#x2F;span&gt; &lt;span style=&quot;color: #c3e88d;&quot;&gt;[Batch 2]&lt;&#x2F;span&gt; &lt;span style=&quot;color: #c3e88d;&quot;&gt;[Batch 3]&lt;&#x2F;span&gt; ... &lt;span style=&quot;color: #c3e88d;&quot;&gt;[Batch N]&lt;&#x2F;span&gt;           &lt;span style=&quot;color: #61afef;&quot;&gt;  │&lt;&#x2F;span&gt;
                   &lt;span style=&quot;color: #61afef;&quot;&gt;└──────────────────────────────────┬────────────────────────────────┘&lt;&#x2F;span&gt;
                                                      &lt;span style=&quot;color: #c3e88d;&quot;&gt;│&lt;&#x2F;span&gt;
                                                      &lt;span style=&quot;color: #c3e88d;&quot;&gt;▼&lt;&#x2F;span&gt; &lt;span style=&quot;color: #abb2bf;&quot;&gt;(Crossbeam Channel)&lt;&#x2F;span&gt;
          &lt;span style=&quot;color: #c3e88d;&quot;&gt;┌────────────────────────────────────────────────────────────────────────────────────────────┐&lt;&#x2F;span&gt;
          &lt;span style=&quot;color: #c3e88d;&quot;&gt;│&lt;&#x2F;span&gt;                         &lt;span style=&quot;color: #c3e88d;&quot;&gt;│&lt;&#x2F;span&gt;                                  &lt;span style=&quot;color: #c3e88d;&quot;&gt;│&lt;&#x2F;span&gt;                               &lt;span style=&quot;color: #c3e88d;&quot;&gt;│&lt;&#x2F;span&gt;
          &lt;span style=&quot;color: #c3e88d;&quot;&gt;▼&lt;&#x2F;span&gt;                         &lt;span style=&quot;color: #c3e88d;&quot;&gt;▼&lt;&#x2F;span&gt;                                  &lt;span style=&quot;color: #c3e88d;&quot;&gt;▼&lt;&#x2F;span&gt;                               &lt;span style=&quot;color: #c3e88d;&quot;&gt;▼&lt;&#x2F;span&gt;
&lt;span style=&quot;color: #61afef;&quot;&gt;┌────────────────────┐&lt;&#x2F;span&gt;   &lt;span style=&quot;color: #61afef;&quot;&gt;┌────────────────────┐&lt;&#x2F;span&gt;         &lt;span style=&quot;color: #61afef;&quot;&gt;┌────────────────────┐&lt;&#x2F;span&gt;   &lt;span style=&quot;color: #61afef;&quot;&gt;┌────────────────────┐&lt;&#x2F;span&gt;
&lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt;    &lt;span style=&quot;color: #89ddff;&quot;&gt;Worker 1&lt;&#x2F;span&gt;      &lt;span style=&quot;color: #61afef;&quot;&gt;&lt;&#x2F;span&gt;   &lt;span style=&quot;color: #61afef;&quot;&gt; &lt;&#x2F;span&gt;    &lt;span style=&quot;color: #89ddff;&quot;&gt; Worker 2&lt;&#x2F;span&gt;      &lt;span style=&quot;color: #61afef;&quot;&gt;&lt;&#x2F;span&gt;       ...   &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt;    &lt;span style=&quot;color: #89ddff;&quot;&gt;   Worker N&lt;&#x2F;span&gt;      &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt;   &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt;      &lt;span style=&quot;color: #ff7b72;&quot;&gt;Metrics&lt;&#x2F;span&gt;       &lt;span style=&quot;color: #61afef;&quot;&gt;&lt;&#x2F;span&gt;
&lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt; &lt;span style=&quot;color: #abb2bf;&quot;&gt;• Matrix Ops&lt;&#x2F;span&gt;     &lt;span style=&quot;color: #61afef;&quot;&gt;&lt;&#x2F;span&gt;   &lt;span style=&quot;color: #61afef;&quot;&gt; &lt;&#x2F;span&gt; &lt;span style=&quot;color: #abb2bf;&quot;&gt;    • Matrix Ops&lt;&#x2F;span&gt;     &lt;span style=&quot;color: #61afef;&quot;&gt; &lt;&#x2F;span&gt;         &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt; &lt;span style=&quot;color: #abb2bf;&quot;&gt;   • Matrix Ops&lt;&#x2F;span&gt;     &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt;   &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt;     &lt;span style=&quot;color: #ff7b72;&quot;&gt;Collector&lt;&#x2F;span&gt;      &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt;
&lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt; &lt;span style=&quot;color: #abb2bf;&quot;&gt;• Fibonacci&lt;&#x2F;span&gt;      &lt;span style=&quot;color: #61afef;&quot;&gt;&lt;&#x2F;span&gt;   &lt;span style=&quot;color: #61afef;&quot;&gt; &lt;&#x2F;span&gt; &lt;span style=&quot;color: #abb2bf;&quot;&gt;    • Fibonacci&lt;&#x2F;span&gt;      &lt;span style=&quot;color: #61afef;&quot;&gt; &lt;&#x2F;span&gt;         &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt; &lt;span style=&quot;color: #abb2bf;&quot;&gt;   • Fibonacci&lt;&#x2F;span&gt;      &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt;   &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt;    &lt;span style=&quot;color: #abb2bf;&quot;&gt;(Receives)&lt;&#x2F;span&gt;    &lt;span style=&quot;color: #61afef;&quot;&gt;&lt;&#x2F;span&gt;
&lt;span style=&quot;color: #61afef;&quot;&gt;└────────────────────┘&lt;&#x2F;span&gt;   &lt;span style=&quot;color: #61afef;&quot;&gt;└────────────────────┘&lt;&#x2F;span&gt;         &lt;span style=&quot;color: #61afef;&quot;&gt;└────────────────────┘&lt;&#x2F;span&gt;   &lt;span style=&quot;color: #61afef;&quot;&gt;└────────────────────┘&lt;&#x2F;span&gt;
          &lt;span style=&quot;color: #c3e88d;&quot;&gt;│&lt;&#x2F;span&gt;                         &lt;span style=&quot;color: #c3e88d;&quot;&gt;│&lt;&#x2F;span&gt;                                  &lt;span style=&quot;color: #c3e88d;&quot;&gt;│&lt;&#x2F;span&gt;
          &lt;span style=&quot;color: #c3e88d;&quot;&gt;└─────────────────────────┼──────────────────────────────────┘&lt;&#x2F;span&gt;
                                    &lt;span style=&quot;color: #c3e88d;&quot;&gt;│&lt;&#x2F;span&gt;
                                    &lt;span style=&quot;color: #c3e88d;&quot;&gt;▼&lt;&#x2F;span&gt;
                               &lt;span style=&quot;color: #61afef;&quot;&gt;┌────────────────────┐&lt;&#x2F;span&gt;
                               &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt;     &lt;span style=&quot;color: #ff9900;&quot;&gt;Results &amp;&lt;&#x2F;span&gt;    &lt;span style=&quot;color: #61afef;&quot;&gt;  │&lt;&#x2F;span&gt;
                               &lt;span style=&quot;color: #61afef;&quot;&gt;│&lt;&#x2F;span&gt;      &lt;span style=&quot;color: #ff9900;&quot;&gt;Analysis&lt;&#x2F;span&gt;    &lt;span style=&quot;color: #61afef;&quot;&gt;  │&lt;&#x2F;span&gt;
                               &lt;span style=&quot;color: #61afef;&quot;&gt;└────────────────────┘&lt;&#x2F;span&gt;
&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;why-crossbeam-channels-with-std-thread&quot;&gt;&lt;span style=&quot;color:orange;&quot;&gt; Why Crossbeam Channels with std::thread? &lt;&#x2F;span&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;For this experiment I use crossbeam channels with std::thread rather than async&#x2F;await because the workload is purely CPU-bound (matrix operations, fibonacci calculations). Since CPU-intensive tasks don&#x27;t benefit from async&#x27;s cooperative scheduling and would block the thread anyway, dedicated threads provide clearer measurement of CPU resource contention without introducing async runtime scheduling as a confounding variable in our worker count and batch size analysis.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;test-configuration&quot;&gt;Test Configuration&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Hardware: MacBook Air M3, 16GB RAM&lt;&#x2F;li&gt;
&lt;li&gt;Video: Big Buck Bunny 60-second clip (1440 frames, MIT licensed)&lt;&#x2F;li&gt;
&lt;li&gt;CPU Load: Matrix operations + recursive fibonacci calculations&lt;&#x2F;li&gt;
&lt;li&gt;Batch Sizes Tested: 4, 10, 20 frames per batch&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;worker-count-results-optimal-batch-size&quot;&gt;Worker Count Results (Optimal Batch Size)&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Total Time = complete processing duration, Efficiency = speedup&#x2F;workers, Contention = resource competition level&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Workers&lt;&#x2F;th&gt;&lt;th&gt;Total Time&lt;&#x2F;th&gt;&lt;th&gt;Avg Frame Time&lt;&#x2F;th&gt;&lt;th&gt;Speedup&lt;&#x2F;th&gt;&lt;th&gt;Efficiency&lt;&#x2F;th&gt;&lt;th&gt;Best Batch&lt;&#x2F;th&gt;&lt;th&gt;Contention&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;21.8s&lt;&#x2F;td&gt;&lt;td&gt;14.4ms&lt;&#x2F;td&gt;&lt;td&gt;1.00x&lt;&#x2F;td&gt;&lt;td&gt;100%&lt;&#x2F;td&gt;&lt;td&gt;N&#x2F;A&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;11.3s&lt;&#x2F;td&gt;&lt;td&gt;15.1ms&lt;&#x2F;td&gt;&lt;td&gt;1.94x&lt;&#x2F;td&gt;&lt;td&gt;97%&lt;&#x2F;td&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;Low&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;7.4s&lt;&#x2F;td&gt;&lt;td&gt;19.9ms&lt;&#x2F;td&gt;&lt;td&gt;2.96x&lt;&#x2F;td&gt;&lt;td&gt;74%&lt;&#x2F;td&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;Medium&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;8.8s&lt;&#x2F;td&gt;&lt;td&gt;35.7ms&lt;&#x2F;td&gt;&lt;td&gt;2.48x&lt;&#x2F;td&gt;&lt;td&gt;41%&lt;&#x2F;td&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;Medium&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;7.2s&lt;&#x2F;td&gt;&lt;td&gt;39.0ms&lt;&#x2F;td&gt;&lt;td&gt;3.02x&lt;&#x2F;td&gt;&lt;td&gt;38%&lt;&#x2F;td&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;Medium&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;batch-size-impact-analysis&quot;&gt;Batch Size Impact Analysis&lt;&#x2F;h2&gt;
&lt;p&gt;The batch size significantly affects performance, with different optimal points for different worker counts:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Each cell shows total completion time in seconds for that worker&#x2F;batch combination&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Workers&lt;&#x2F;th&gt;&lt;th&gt;Batch 4&lt;&#x2F;th&gt;&lt;th&gt;Batch 10&lt;&#x2F;th&gt;&lt;th&gt;Batch 20&lt;&#x2F;th&gt;&lt;th&gt;Optimal&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;22.02s&lt;&#x2F;td&gt;&lt;td&gt;21.80s&lt;&#x2F;td&gt;&lt;td&gt;21.99s&lt;&#x2F;td&gt;&lt;td&gt;Any&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;11.74s&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;11.25s&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;12.05s&lt;&#x2F;td&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;9.71s&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;7.37s&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;9.39s&lt;&#x2F;td&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;9.22s&lt;&#x2F;td&gt;&lt;td&gt;8.93s&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;8.77s&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;8.14s&lt;&#x2F;td&gt;&lt;td&gt;7.22s&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;7.19s&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;key-findings&quot;&gt;&lt;span style=&quot;color:orange;&quot;&gt;  Key Findings &lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The results from the experiment show a clear trade-off between speed and efficiency:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Fastest Time vs. Optimal Efficiency&lt;&#x2F;strong&gt;: The absolute fastest time was &lt;strong&gt;7.2s with 8 workers&lt;&#x2F;strong&gt;. However, the most efficient configuration was &lt;strong&gt;4 workers&lt;&#x2F;strong&gt;, which completed the task in &lt;strong&gt;7.4s&lt;&#x2F;strong&gt;. This setup provided 74% efficiency, representing a better balance of speed and resource use.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Performance Regression at 6 Workers&lt;&#x2F;strong&gt;: Adding workers beyond 4 proved counterproductive. Performance degraded when moving from 4 workers (7.4s) to 6 workers (8.8s), indicating that the costs of thread management and resource contention outweighed the benefits of more threads.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Batch Size Scaling&lt;&#x2F;strong&gt;: The optimal batch size increased with the worker count. Configurations with 2-4 workers performed best with a batch size of 10, while 6-8 workers required a larger batch size of 20 to reduce coordination overhead.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Batch Size Impact&lt;&#x2F;strong&gt;: Using a non-optimal batch size caused significant performance loss. With 4 workers, a batch size of 4 resulted in a 9.7s completion time, over 30% slower than the 7.4s achieved with the optimal batch size of 10.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;batch-size-effects-in-this-test&quot;&gt;&lt;span style=&quot;color:orange;&quot;&gt;  Batch Size Effects in This Test &lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Within this specific implementation, batch size optimization shows clear patterns:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Single Worker Baseline&lt;&#x2F;strong&gt;: Batch size has minimal impact on single-threaded performance (21.8s-22.0s), confirming that batch size effects are purely parallel processing artifacts.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Small Worker Counts (2-4)&lt;&#x2F;strong&gt;: Batch size 10 provides optimal balance. Smaller batches (4) create excessive context switching overhead, while larger batches (20) may cause load imbalance.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Large Worker Counts (6-8)&lt;&#x2F;strong&gt;: Batch size 20 performs best, likely due to better cache locality and reduced coordination overhead among many workers.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Load Balancing&lt;&#x2F;strong&gt;: With 1440 frames, batch size 4 creates 360 batches (good distribution), batch size 10 creates 144 batches, and batch size 20 creates 72 batches. Fewer workers benefit from more batches for better load distribution.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Memory Context&lt;&#x2F;strong&gt;: Each test loads 1.26 GB of frame data into memory, which fits comfortably within the 16GB system RAM, eliminating memory pressure as a confounding factor.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-happening-in-this-test&quot;&gt;&lt;span style=&quot;color:orange;&quot;&gt;  What&#x27;s Happening in This Test &lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Within the context of this specific implementation, the two-phase approach isolates parallel processing effects from video I&#x2F;O bottlenecks. The test results show a performance cliff at 6+ workers where resource contention appears to overwhelm parallelization benefits.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The 4-Worker Measurement&lt;&#x2F;strong&gt;: Up to 4 workers in this test, I observe scaling with moderate frame time increases (14.4ms → 19.9ms). CPU cores appear to work with manageable cache and memory bandwidth competition in this workload.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The 6-Worker Measurement&lt;&#x2F;strong&gt;: At 6 workers in this test, frame processing time nearly doubles (36.0ms), suggesting resource saturation. This may indicate the CPU cannot efficiently feed all workers in this specific scenario.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;8-Worker Recovery&lt;&#x2F;strong&gt;: While 8 workers recovered slightly (7.2s vs 8.8s for 6 workers), the measured efficiency remained low (38%) in this test configuration.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-takeaway&quot;&gt;&lt;span style=&quot;color:orange;&quot;&gt;  The Takeaway &lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This experiment shows that for this specific workload on an M3 MacBook Air, the optimal solution requires tuning both worker count and batch size together.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Worker Count&lt;&#x2F;strong&gt;: While &lt;strong&gt;8 workers&lt;&#x2F;strong&gt; produced the fastest result (7.2s), &lt;strong&gt;4 workers&lt;&#x2F;strong&gt; gave a nearly identical speed (7.4s) with far greater efficiency (74% vs 38%). For practical purposes, 4 workers is the better configuration.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Batch Size&lt;&#x2F;strong&gt;: The best batch size changes with the worker count. Smaller worker pools (2-4) were fastest with a batch size of 10, while larger pools (6-8) needed a larger batch size of 20 to perform well.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Combined Optimization&lt;&#x2F;strong&gt;: The interaction between these two parameters is critical and can account for performance swings of 30% or more, making it essential to test and tune them together.&lt;&#x2F;p&gt;
&lt;p&gt;Note: These results are specific to this implementation, hardware, and workload type. Different applications, algorithms, or hardware configurations may show different optimal points. The batch size effects will vary significantly based on task granularity and data access patterns.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Bundling &amp; Notarization GStreamer with Tauri Apps on macOS: A Developer&#x27;s Guide</title>
        <published>2025-04-09T00:00:00+00:00</published>
        <updated>2025-04-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://altunenes.github.io/posts/taurigst/"/>
        <id>https://altunenes.github.io/posts/taurigst/</id>
        
        <content type="html" xml:base="https://altunenes.github.io/posts/taurigst/">&lt;p&gt;Working with multimedia in desktop applications often requires using GStreamer, a powerful multimedia framework. However, when building a macOS app with Tauri that uses GStreamer, developers face numerous challenges in bundling, signing, and notarizing the application correctly.&lt;&#x2F;p&gt;
&lt;p&gt;After some troubleshooting and experimentation, I&#x27;ve successfully overcome these challenges. This guide shares key insights to help other developers avoid similar headaches.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-challenge&quot;&gt;&lt;span style=&quot;color:orange;&quot;&gt;The Challenge&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Bundling GStreamer with a Tauri app on macOS involves several complex issues:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;GStreamer&#x27;s architecture&lt;&#x2F;strong&gt; consists of numerous interdependent dynamic libraries that must be correctly bundled and linked&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Apple&#x27;s notarization requirements&lt;&#x2F;strong&gt; conflict with GStreamer&#x27;s recommended configurations&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Path references&lt;&#x2F;strong&gt; in dynamic libraries must be properly relocated&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Code signing&lt;&#x2F;strong&gt; must be applied correctly to each individual binary&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Tauri&#x27;s bundling system&lt;&#x2F;strong&gt; must be properly configured to include GStreamer&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;1-bundling-challenges&quot;&gt;&lt;span style=&quot;color:orange;&quot;&gt; 1. Bundling Challenges&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;GStreamer is complex because:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It contains dozens of &lt;code&gt;.dylib&lt;&#x2F;code&gt; files that must be included in your app bundle&lt;&#x2F;li&gt;
&lt;li&gt;These libraries reference each other with absolute paths&lt;&#x2F;li&gt;
&lt;li&gt;They must be bundled for distribution to users who don&#x27;t have GStreamer installed&lt;&#x2F;li&gt;
&lt;li&gt;Missing even one dependency can cause cryptic runtime errors&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;1-1-apple-s-signing-notarization-requirements&quot;&gt;&lt;span style=&quot;color:orange;&quot;&gt; 1.1 Apple&#x27;s Signing &amp;amp; Notarization Requirements&lt;&#x2F;span&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Apple&#x27;s requirements directly conflict with GStreamer&#x27;s documentation:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hardened Runtime&lt;&#x2F;strong&gt;: Apple requires enabling the hardened runtime for notarization, while GStreamer documentation suggests disabling it&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Individual Signing&lt;&#x2F;strong&gt;: Each &lt;code&gt;.dylib&lt;&#x2F;code&gt; must be signed separately with a valid Developer ID&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Secure Timestamps&lt;&#x2F;strong&gt;: All signatures must include a secure timestamp&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Special Entitlements&lt;&#x2F;strong&gt;: GStreamer requires specific entitlements to function with hardened runtime enabled:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;com.apple.security.cs.allow-unsigned-executable-memory&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;com.apple.security.cs.disable-library-validation&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;com.apple.security.cs.allow-dyld-environment-variables&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;1-2-path-handling-solutions&quot;&gt;&lt;span style=&quot;color:orange;&quot;&gt; 1.2 Path Handling Solutions&lt;&#x2F;span&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Getting the library paths right is critical:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;install_name_tool&lt;&#x2F;code&gt; to modify library references to use &lt;code&gt;@executable_path&lt;&#x2F;code&gt; instead of absolute paths&lt;&#x2F;li&gt;
&lt;li&gt;Add &lt;code&gt;@rpath&lt;&#x2F;code&gt; references to the executable&lt;&#x2F;li&gt;
&lt;li&gt;Set environment variables in a wrapper script and &lt;code&gt;Info.plist&lt;&#x2F;code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GST_PLUGIN_SYSTEM_PATH&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GST_PLUGIN_PATH&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;DYLD_LIBRARY_PATH&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;1-3-tauri-integration&quot;&gt;&lt;span style=&quot;color:orange;&quot;&gt;1.3 Tauri Integration&lt;&#x2F;span&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Integrating with Tauri requires special attention:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Configure Tauri&#x27;s resources system to include GStreamer libraries&lt;&#x2F;li&gt;
&lt;li&gt;Modify &lt;code&gt;build.rs&lt;&#x2F;code&gt; to add the correct rpath&lt;&#x2F;li&gt;
&lt;li&gt;Avoid interfering with Tauri&#x27;s DMG creation process&lt;&#x2F;li&gt;
&lt;li&gt;Use a wrapper script for your main executable to set environment variables&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;span style=&quot;color:orange;&quot;&gt;Conclusion&lt;&#x2F;span&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Successfully bundling GStreamer with a Tauri app on macOS requires navigating the complex interplay between GStreamer&#x27;s architecture, Apple&#x27;s notarization requirements, and Tauri&#x27;s bundling system.&lt;&#x2F;p&gt;
&lt;p&gt;The key is to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ALWAYS use custom build scripts to handle library paths, do not rely tauri.conf file manually but edit the tauri file WITH your build script.&lt;&#x2F;li&gt;
&lt;li&gt;Sign each library individually&lt;&#x2F;li&gt;
&lt;li&gt;Use appropriate entitlements&lt;&#x2F;li&gt;
&lt;li&gt;Fix all library paths using &lt;code&gt;install_name_tool&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Ensure required environment variables are set&lt;&#x2F;li&gt;
&lt;li&gt;Verify all required libraries are included&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With this approach, you can create properly signed, notarized macOS apps that include GStreamer libraries and will work perfectly on customer systems without requiring a separate GStreamer installation.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
